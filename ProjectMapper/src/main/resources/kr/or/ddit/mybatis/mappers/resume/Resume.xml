<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.users.resume.mapper.ResumeMapper">

   <!-- 자격증 resultMap -->
   <resultMap type="CertificateVO" id="certificateMap" autoMapping="true">
       <id property="certId" column="cert_id"/>
       <result property="userId" column="user_id"/>
       <result property="certName" column="cert_name"/>
       <result property="certNumber" column="cert_number"/>
       <result property="issuanceName" column="issuance_name"/>
       <result property="issueDate" column="issue_date"/>
       <result property="certAfi" column="cert_afi"/>
       <association property="atchFile" column="cert_afi" 
           select="kr.or.ddit.atch.mapper.AtchFileMapper.selectAtchFileEnable" />
   </resultMap>
   
   <!-- 사용자 기본정보 조회 -->
   <select id="selectUserBasicInfo" resultType="UsersVO">
       SELECT
           user_id,
           user_name,
           user_email,
           user_phone_number,
           user_date_of_birth,
           user_addr1,
           user_addr2,
           user_profile_afi
       FROM users
       WHERE user_id = #{userId}
   </select>

   <!-- 사용자 프로필 이미지 업데이트 -->
   <update id="updateUserProfileImage">
       UPDATE users 
       SET user_profile_afi = #{profileAfi}
       WHERE user_id = #{userId}
   </update>

   <!-- 사용자 경력 상태 업데이트 -->
   <update id="updateUserCareerStatus">
       UPDATE users
       SET career_status = #{careerStatus}
       WHERE user_id = #{userId}
   </update>
   
    <!-- 이력서 파일 resultMap -->
    <resultMap type="ResumeFileVO" id="resumeFileMap">
        <id property="resumeFileId" column="resume_file_id"/>
        <result property="userId" column="user_id"/>
        <result property="resumeAfi" column="resume_afi"/>
        <!-- AtchFileVO 연관관계 설정 -->
        <association property="atchFile" column="resume_afi"
            select="kr.or.ddit.atch.mapper.AtchFileMapper.selectAtchFileEnable"/>
    </resultMap>
    
    <!-- 포트폴리오 파일 resultMap -->
    <resultMap type="PortfolioFileVO" id="portfolioFileMap">
        <id property="ptflFileId" column="ptfl_file_id"/>
        <result property="userId" column="user_id"/>
        <result property="ptflAfi" column="ptfl_afi"/>
        <!-- AtchFileVO 연관관계 설정 -->
        <association property="atchFile" column="ptfl_afi"
            select="kr.or.ddit.atch.mapper.AtchFileMapper.selectAtchFileEnable"/>
    </resultMap>
    
    <!-- 이력서 파일 조회 -->
    <select id="selectResumeFile" parameterType="string" resultMap="resumeFileMap">
        SELECT resume_file_id, user_id, resume_afi
        FROM resume_file
        WHERE user_id = #{userId}
    </select>

    <!-- 이력서 파일 등록 -->
    <insert id="insertResumeFile" parameterType="ResumeFileVO">
        <selectKey order="BEFORE" resultType="string" keyProperty="resumeFileId">
            SELECT 'RF' || LPAD(RESUME_FILE_SEQ.NEXTVAL, 6, '0') FROM DUAL
        </selectKey>
        INSERT INTO resume_file (
            resume_file_id,
            user_id,
            resume_afi
        ) VALUES (
            #{resumeFileId},
            #{userId},
            #{resumeAfi}
        )
    </insert>

    <!-- 이력서 파일 업데이트 -->
    <update id="updateResumeFile">
        UPDATE resume_file
        SET resume_afi = #{fileId}
        WHERE user_id = #{userId}
    </update>

    <!-- 이력서 파일 삭제 -->
    <delete id="deleteResumeFile">
        DELETE FROM resume_file
        WHERE resume_file_id = #{resumeFileId}
        AND user_id = #{userId}
    </delete>

    <!-- 포트폴리오 파일 조회 -->
    <select id="selectPortfolioFile" parameterType="string" resultMap="portfolioFileMap">
        SELECT ptfl_file_id, user_id, ptfl_afi
        FROM portfolio_file
        WHERE user_id = #{userId}
    </select>

    <!-- 포트폴리오 파일 등록 -->
    <insert id="insertPortfolioFile" parameterType="PortfolioFileVO">
        <selectKey order="BEFORE" resultType="string" keyProperty="ptflFileId">
            SELECT 'PF' || LPAD(PORTFOLIO_FILE_SEQ.NEXTVAL, 6, '0') FROM DUAL
        </selectKey>
        INSERT INTO portfolio_file (
            ptfl_file_id,
            user_id,
            ptfl_afi
        ) VALUES (
            #{ptflFileId},
            #{userId},
            #{ptflAfi}
        )
    </insert>

    <!-- 포트폴리오 파일 업데이트 -->
    <update id="updatePortfolioFile">
        UPDATE portfolio_file
        SET ptfl_afi = #{fileId}
        WHERE user_id = #{userId}
    </update>

    <!-- 포트폴리오 파일 삭제 -->
    <delete id="deletePortfolioFile">
        DELETE FROM portfolio_file
        WHERE ptfl_file_id = #{ptflFileId}
        AND user_id = #{userId}
    </delete>

   <!-- 자격증 파일 업데이트 -->
   <update id="updateCertificateFile">
       UPDATE certificate
       SET cert_afi = #{fileId}
       WHERE cert_id = #{certId}
   </update>

   <!-- 자격증 등록 -->
   <insert id="insertCertificate" parameterType="CertificateVO">
       <selectKey order="BEFORE" resultType="string" keyProperty="certId">
           SELECT 'CERT' || LPAD(CERT_SEQ.NEXTVAL, 6, '0') FROM DUAL
       </selectKey>
       INSERT INTO certificate (
           cert_id,
           user_id,
           cert_name,
           cert_number,
           issuance_name,
           issue_date,
           cert_afi
       ) VALUES (
           #{certId},
           #{userId},
           #{certName},
           #{certNumber},
           #{issuanceName},
           #{issueDate},
           #{certAfi}
       )
   </insert>

   <!-- 자격증 상세 조회 -->
   <select id="selectCertificate" parameterType="string" resultMap="certificateMap">
       SELECT
           cert_id,
           user_id,
           cert_name,
           cert_number,
           issuance_name,
           issue_date,
           cert_afi
       FROM certificate
       WHERE cert_id = #{certId}
   </select>

   <!-- 자격증 목록 조회 (페이징) -->
   <select id="selectCertificateList" parameterType="PaginationInfo" resultMap="certificateMap">
       SELECT B.*
       FROM (
           SELECT ROWNUM RNUM, A.*
           FROM (
               SELECT
                   cert_id,
                   user_id,
                   cert_name,
                   cert_number,
                   issuance_name,
                   issue_date,
                   cert_afi
               FROM certificate
               WHERE user_id = #{detailCondition.userId}
               ORDER BY issue_date DESC
           ) A
           WHERE ROWNUM &lt;= #{endRow}
       ) B
       WHERE B.RNUM &gt;= #{startRow}
   </select>

   <!-- 경력 등록 -->
    <insert id="insertCareer" parameterType="CareerVO">
        <selectKey order="BEFORE" resultType="string" keyProperty="careerId">
            SELECT 'CR' || LPAD(CAREER_SEQ.NEXTVAL, 6, '0') FROM DUAL
        </selectKey>
        INSERT INTO career (
            career_id,
            user_id,
            career_company_name,
            career_job_title,
            career_department,
            career_position,
            career_join_date,
            career_leave_date,
            career_emp_st_code,
            career_job_des
        ) VALUES (
            #{careerId},
            #{userId},
            #{careerCompanyName},
            #{careerJobTitle},
            #{careerDepartment},
            #{careerPosition},
            #{careerJoinDate},
            #{careerLeaveDate},
            #{careerEmpStCode},
            #{careerJobDes}
        )
    </insert>

    <!-- 경력 상세 조회 -->
    <select id="selectCareer" parameterType="string" resultType="CareerVO">
        SELECT
            career_id,
            user_id,
            career_company_name,
            career_job_title,
            career_department,
            career_position,
            career_join_date,
            career_leave_date,
            career_emp_st_code,
            career_job_des
        FROM career
        WHERE career_id = #{careerId}
    </select>

    <!-- 경력 목록 조회 -->
    <select id="selectCareerList" parameterType="string" resultType="CareerVO">
        SELECT
            career_id,
            user_id,
            career_company_name,
            career_job_title,
            career_department,
            career_position,
            career_join_date,
            career_leave_date,
            career_emp_st_code,
            career_job_des
        FROM career
        WHERE user_id = #{userId}
        ORDER BY career_join_date DESC
    </select>

    <!-- 경력 정보 수정 -->
    <update id="updateCareer" parameterType="CareerVO">
        UPDATE career
        SET
            career_company_name = #{careerCompanyName},
            career_job_title = #{careerJobTitle},
            career_department = #{careerDepartment},
            career_position = #{careerPosition},
            career_join_date = #{careerJoinDate},
            career_leave_date = #{careerLeaveDate},
            career_emp_st_code = #{careerEmpStCode},
            career_job_des = #{careerJobDes}
        WHERE career_id = #{careerId}
        AND user_id = #{userId}
    </update>

	<!-- INSERT 쿼리 -->
	<insert id="insertEducation" parameterType="EducationVO">
	    <selectKey order="BEFORE" resultType="string" keyProperty="eduId">
	        SELECT 'EDU' || LPAD(EDU_SEQ.NEXTVAL, 6, '0') FROM DUAL
	    </selectKey>
	    INSERT INTO education (
	        edu_id,
	        user_id,
	        edu_school_name,
	        edu_level,
	        edu_level_category,
	        edu_major,
	        edu_department,
	        edu_grad_st_code,
	        edu_grad_date,
	        edu_enroll_date
	    ) VALUES (
	        #{eduId},
	        #{userId},
	        #{eduSchoolName},
	        #{eduLevel},
	        #{eduLevelCategory},
	        #{eduMajor},
	        #{eduDepartment},
	        #{eduGradStCode},
	        #{eduGradDate},
	        #{eduEnrollDate}
	    )
	</insert>
	
	<!-- UPDATE 쿼리 -->
	<update id="updateEducation" parameterType="EducationVO">
	    UPDATE education
	    SET 
	        edu_school_name = #{eduSchoolName},
	        edu_level = #{eduLevel},
	        edu_level_category = #{eduLevelCategory},
	        edu_major = #{eduMajor},
	        edu_department = #{eduDepartment},
	        edu_grad_st_code = #{eduGradStCode},
	        edu_grad_date = #{eduGradDate},
	        edu_enroll_date = #{eduEnrollDate}
	    WHERE edu_id = #{eduId}
	    AND user_id = #{userId}
	</update>
	
	<!-- 학력 상세 조회 -->
	<select id="selectEducation" parameterType="string" resultType="EducationVO">
	    SELECT
	        edu_id,
	        user_id,
	        edu_school_name,
	        edu_level,
	        edu_level_category,
	        edu_major,
	        edu_department,
	        edu_grad_st_code,
	        edu_grad_date,
	        edu_enroll_date
	    FROM education
	    WHERE edu_id = #{eduId}
	</select>
	
	<!-- 학력 목록 조회 (최신 데이터만) -->
	<select id="selectEducationList" parameterType="string" resultType="EducationVO">
	    SELECT *
	    FROM (
	        SELECT
	            edu_id,
	            user_id,
	            edu_school_name,
	            edu_level,
	            edu_level_category,
	            edu_major,
	            edu_department,
	            edu_grad_st_code,
	            edu_grad_date,
	            edu_enroll_date
	        FROM education
	        WHERE user_id = #{userId}
	        ORDER BY edu_enroll_date DESC
	    )
	    WHERE ROWNUM = 1
	</select>
	
	<!-- 사용자의 학력 정보 존재 여부 확인 -->
	<select id="hasEducation" parameterType="string" resultType="boolean">
	    SELECT CASE 
	        WHEN COUNT(*) > 0 THEN 1 
	        ELSE 0 
	    END
	    FROM education
	    WHERE user_id = #{userId}
	</select>
	
	<!-- 학력 정보 삭제 -->
	<delete id="deleteEducation">
	    DELETE FROM education
	    WHERE edu_id = #{eduId}
	    AND user_id = #{userId}
	</delete>

    <!-- 교육이력 등록 -->
    <insert id="insertEducationHistory" parameterType="EducationHistoryVO">
        <selectKey order="BEFORE" resultType="string" keyProperty="edHistoryId">
            SELECT 'EDH' || LPAD(EDU_HISTORY_SEQ.NEXTVAL, 6, '0') FROM DUAL
        </selectKey>
        INSERT INTO education_history (
            ed_history_id,
            user_id,
            ed_institution,
            ed_course,
            ed_start_date,
            ed_comp_date
        ) VALUES (
            #{edHistoryId},
            #{userId},
            #{edInstitution},
            #{edCourse},
            #{edStartDate},
            #{edCompDate}
        )
    </insert>

    <!-- 교육이력 상세 조회 -->
    <select id="selectEducationHistory" parameterType="string" resultType="EducationHistoryVO">
        SELECT
            ed_history_id,
            user_id,
            ed_institution,
            ed_course,
            ed_start_date,
            ed_comp_date
        FROM education_history
        WHERE ed_history_id = #{edHistoryId}
    </select>

    <!-- 교육이력 목록 조회 -->
    <select id="selectEducationHistoryList" parameterType="string" resultType="EducationHistoryVO">
        SELECT
            ed_history_id,
            user_id,
            ed_institution,
            ed_course,
            ed_start_date,
            ed_comp_date
        FROM education_history
        WHERE user_id = #{userId}
        ORDER BY ed_start_date DESC
    </select>

    <!-- 교육이력 정보 수정 -->
    <update id="updateEducationHistory" parameterType="EducationHistoryVO">
        UPDATE education_history
        SET
            ed_institution = #{edInstitution},
            ed_course = #{edCourse},
            ed_start_date = #{edStartDate},
            ed_comp_date = #{edCompDate}
        WHERE ed_history_id = #{edHistoryId}
        AND user_id = #{userId}
    </update>

    <!-- 교육이력 정보 삭제 -->
    <delete id="deleteEducationHistory">
        DELETE FROM education_history
        WHERE ed_history_id = #{edHistoryId}
        AND user_id = #{userId}
    </delete>

   <!-- 전체 자격증 수 조회 -->
   <select id="selectTotalCertificateCount" parameterType="PaginationInfo" resultType="int">
       SELECT COUNT(*)
       FROM certificate
       WHERE user_id = #{detailCondition.userId}
   </select>

   <!-- 전체 경력 수 조회 -->
   <select id="selectTotalCareerCount" parameterType="string" resultType="int">
       SELECT COUNT(*)
       FROM career
       WHERE user_id = #{userId}
   </select>

   <!-- 전체 학력 수 조회 -->
   <select id="selectTotalEducationCount" parameterType="string" resultType="int">
       SELECT COUNT(*)
       FROM education
       WHERE user_id = #{userId}
   </select>

   <!-- 전체 교육이력 수 조회 -->
   <select id="selectTotalEducationHistoryCount" parameterType="string" resultType="int">
       SELECT COUNT(*)
       FROM education_history
       WHERE user_id = #{userId}
   </select>
   
   <!-- 자기소개서 resultMap -->
	<resultMap type="IntroductionVO" id="introductionMap" autoMapping="true">
	    <id property="introId" column="intro_id"/>
	    <result property="userId" column="user_id"/>
	    <result property="introTitle" column="intro_title"/>
	    <result property="introContent" column="intro_content"/>
	    <result property="introRegDate" column="intro_reg_date"/>
	    <result property="introModDate" column="intro_mod_date"/>
	</resultMap>
	
	<!-- 자기소개서 등록 -->
	<insert id="insertIntroduction" parameterType="IntroductionVO">
	    <selectKey order="BEFORE" resultType="string" keyProperty="introId">
	        SELECT 'IN' || LPAD(INTRO_SEQ.NEXTVAL, 6, '0') FROM DUAL
	    </selectKey>
	    INSERT INTO introduction (
	        intro_id, user_id, intro_title,
	        intro_content, intro_reg_date, intro_mod_date
	    ) VALUES (
	        #{introId}, #{userId}, #{introTitle},
	        #{introContent}, SYSDATE, NULL
	    )
	</insert>
	
	<!-- 자기소개서 상세 조회 -->
	<select id="selectIntroduction" parameterType="string" resultMap="introductionMap">
	    SELECT *
	    FROM introduction
	    WHERE intro_id = #{introId}
	</select>
	
	<!-- 자기소개서 목록 조회 -->
	<select id="selectIntroductionList" parameterType="string" resultMap="introductionMap">
	    SELECT *
	    FROM introduction
	    WHERE user_id = #{userId}
	    ORDER BY intro_reg_date DESC
	</select>
	
	<!-- 자기소개서 수정 -->
	<update id="updateIntroduction" parameterType="IntroductionVO">
	    UPDATE introduction
	    SET intro_title = #{introTitle},
	        intro_content = #{introContent},
	        intro_mod_date = SYSDATE
	    WHERE intro_id = #{introId}
	    AND user_id = #{userId}
	</update>
	
	<!-- 자기소개서 삭제 -->
	<delete id="deleteIntroduction">
	    DELETE FROM introduction
	    WHERE intro_id = #{introId}
	    AND user_id = #{userId}
	</delete>
	
	<!-- 사용자 스킬 resultMap -->
	<resultMap type="UserSkillVO" id="userSkillMap" autoMapping="true">
	    <id property="skillId" column="skill_id"/>
	    <result property="userId" column="user_id"/>
	    <result property="skillName" column="skill_name"/>
<!-- 	    <result property="skillCategory" column="skill_category"/> -->
<!-- 	    <result property="ncsCode" column="ncs_code"/> -->
	    <result property="regDate" column="reg_date"/>
	</resultMap>
	
	<!-- 사용자 스킬 등록 -->
	<insert id="insertUserSkill" parameterType="UserSkillVO">
	    INSERT INTO USER_SKILL (
	        SKILL_ID,
	        USER_ID,
	        SKILL_NAME,
	        SKILL_CATEGORY,
	        NCS_CODE
	    ) VALUES (
	        'SK' || LPAD(SKILL_SEQ.NEXTVAL, 6, '0'),
	        #{userId},
	        #{skillName},
	        #{skillCategory},
	        #{ncsCode}
	    )
	</insert>
	
	<!-- 사용자 스킬 목록 조회 -->
	<select id="selectUserSkillList" parameterType="string" resultMap="userSkillMap">
	    SELECT *
	    FROM USER_SKILL 
	    WHERE USER_ID = #{userId}
	    ORDER BY REG_DATE DESC
	</select>
	
	<!-- 카테고리별 스킬 조회 -->
	<select id="selectUserSkillByCategory" resultMap="userSkillMap">
	    SELECT *
	    FROM USER_SKILL
	    WHERE USER_ID = #{userId}
	    AND SKILL_CATEGORY = #{category}
	    ORDER BY REG_DATE DESC
	</select>
	
	<!-- NCS 코드별 스킬 조회 -->
	<select id="selectUserSkillByNcsCode" resultMap="userSkillMap">
	    SELECT *
	    FROM USER_SKILL
	    WHERE USER_ID = #{userId}
	    AND NCS_CODE = #{ncsCode}
	    ORDER BY REG_DATE DESC
	</select>
	
	<!-- 사용자 스킬 삭제 -->
	<delete id="deleteUserSkill">
	    DELETE FROM USER_SKILL 
	    WHERE SKILL_ID = #{skillId}
	    AND USER_ID = #{userId}
	</delete>
</mapper>